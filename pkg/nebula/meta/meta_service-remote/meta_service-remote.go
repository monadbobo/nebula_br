// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-clients/go/nebula/meta"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ListPartsResp listParts(ListPartsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp multiPut(MultiPutReq req)")
  fmt.Fprintln(os.Stderr, "  GetResp get(GetReq req)")
  fmt.Fprintln(os.Stderr, "  MultiGetResp multiGet(MultiGetReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp remove(RemoveReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeRange(RemoveRangeReq req)")
  fmt.Fprintln(os.Stderr, "  ScanResp scan(ScanReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTagIndex(CreateTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTagIndex(DropTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagIndexResp getTagIndex(GetTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildTagIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdgeIndex(CreateEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdgeIndex(DropEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildEdgeIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp getUserRoles(GetUserRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  BalanceResp balance(BalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp leaderBalance(LeaderBalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSnapshot(CreateSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSnapshot(DropSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ListSnapshotsResp listSnapshots(ListSnapshotsReq req)")
  fmt.Fprintln(os.Stderr, "  AdminJobResp runAdminJob(AdminJobReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZone(AddZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZone(DropZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHostIntoZone(AddHostIntoZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropHostFromZone(DropHostFromZoneReq req)")
  fmt.Fprintln(os.Stderr, "  GetZoneResp getZone(GetZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ListZonesResp listZones(ListZonesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addGroup(AddGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropGroup(DropGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZoneIntoGroup(AddZoneIntoGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZoneFromGroup(DropZoneFromGroupReq req)")
  fmt.Fprintln(os.Stderr, "  GetGroupResp getGroup(GetGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ListGroupsResp listGroups(ListGroupsReq req)")
  fmt.Fprintln(os.Stderr, "  CreateBackupResp createBackup(CreateBackupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp restoreMeta(RestoreMetaReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addListener(AddListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeListener(RemoveListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ListListenerResp listListener(ListListenerReq req)")
  fmt.Fprintln(os.Stderr, "  GetStatisResp getStatis(GetStatisReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := meta.NewMetaServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg362 := flag.Arg(1)
    mbTrans363 := thrift.NewMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil {
      Usage()
      return
    }
    factory365 := thrift.NewSimpleJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    argvalue0 := meta.NewCreateSpaceReq()
    err367 := argvalue0.Read(jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg368 := flag.Arg(1)
    mbTrans369 := thrift.NewMemoryBufferLen(len(arg368))
    defer mbTrans369.Close()
    _, err370 := mbTrans369.WriteString(arg368)
    if err370 != nil {
      Usage()
      return
    }
    factory371 := thrift.NewSimpleJSONProtocolFactory()
    jsProt372 := factory371.GetProtocol(mbTrans369)
    argvalue0 := meta.NewDropSpaceReq()
    err373 := argvalue0.Read(jsProt372)
    if err373 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg374 := flag.Arg(1)
    mbTrans375 := thrift.NewMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewSimpleJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue0 := meta.NewGetSpaceReq()
    err379 := argvalue0.Read(jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg380 := flag.Arg(1)
    mbTrans381 := thrift.NewMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewSimpleJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue0 := meta.NewListSpacesReq()
    err385 := argvalue0.Read(jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg386 := flag.Arg(1)
    mbTrans387 := thrift.NewMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewSimpleJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue0 := meta.NewCreateTagReq()
    err391 := argvalue0.Read(jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewSimpleJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue0 := meta.NewAlterTagReq()
    err397 := argvalue0.Read(jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg398 := flag.Arg(1)
    mbTrans399 := thrift.NewMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewSimpleJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue0 := meta.NewDropTagReq()
    err403 := argvalue0.Read(jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg404 := flag.Arg(1)
    mbTrans405 := thrift.NewMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewSimpleJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue0 := meta.NewGetTagReq()
    err409 := argvalue0.Read(jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg410 := flag.Arg(1)
    mbTrans411 := thrift.NewMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewSimpleJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue0 := meta.NewListTagsReq()
    err415 := argvalue0.Read(jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg416 := flag.Arg(1)
    mbTrans417 := thrift.NewMemoryBufferLen(len(arg416))
    defer mbTrans417.Close()
    _, err418 := mbTrans417.WriteString(arg416)
    if err418 != nil {
      Usage()
      return
    }
    factory419 := thrift.NewSimpleJSONProtocolFactory()
    jsProt420 := factory419.GetProtocol(mbTrans417)
    argvalue0 := meta.NewCreateEdgeReq()
    err421 := argvalue0.Read(jsProt420)
    if err421 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg422 := flag.Arg(1)
    mbTrans423 := thrift.NewMemoryBufferLen(len(arg422))
    defer mbTrans423.Close()
    _, err424 := mbTrans423.WriteString(arg422)
    if err424 != nil {
      Usage()
      return
    }
    factory425 := thrift.NewSimpleJSONProtocolFactory()
    jsProt426 := factory425.GetProtocol(mbTrans423)
    argvalue0 := meta.NewAlterEdgeReq()
    err427 := argvalue0.Read(jsProt426)
    if err427 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg428 := flag.Arg(1)
    mbTrans429 := thrift.NewMemoryBufferLen(len(arg428))
    defer mbTrans429.Close()
    _, err430 := mbTrans429.WriteString(arg428)
    if err430 != nil {
      Usage()
      return
    }
    factory431 := thrift.NewSimpleJSONProtocolFactory()
    jsProt432 := factory431.GetProtocol(mbTrans429)
    argvalue0 := meta.NewDropEdgeReq()
    err433 := argvalue0.Read(jsProt432)
    if err433 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg434 := flag.Arg(1)
    mbTrans435 := thrift.NewMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewSimpleJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue0 := meta.NewGetEdgeReq()
    err439 := argvalue0.Read(jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg440 := flag.Arg(1)
    mbTrans441 := thrift.NewMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil {
      Usage()
      return
    }
    factory443 := thrift.NewSimpleJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    argvalue0 := meta.NewListEdgesReq()
    err445 := argvalue0.Read(jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg446 := flag.Arg(1)
    mbTrans447 := thrift.NewMemoryBufferLen(len(arg446))
    defer mbTrans447.Close()
    _, err448 := mbTrans447.WriteString(arg446)
    if err448 != nil {
      Usage()
      return
    }
    factory449 := thrift.NewSimpleJSONProtocolFactory()
    jsProt450 := factory449.GetProtocol(mbTrans447)
    argvalue0 := meta.NewListHostsReq()
    err451 := argvalue0.Read(jsProt450)
    if err451 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg452 := flag.Arg(1)
    mbTrans453 := thrift.NewMemoryBufferLen(len(arg452))
    defer mbTrans453.Close()
    _, err454 := mbTrans453.WriteString(arg452)
    if err454 != nil {
      Usage()
      return
    }
    factory455 := thrift.NewSimpleJSONProtocolFactory()
    jsProt456 := factory455.GetProtocol(mbTrans453)
    argvalue0 := meta.NewGetPartsAllocReq()
    err457 := argvalue0.Read(jsProt456)
    if err457 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(value0))
    fmt.Print("\n")
    break
  case "listParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListParts requires 1 args")
      flag.Usage()
    }
    arg458 := flag.Arg(1)
    mbTrans459 := thrift.NewMemoryBufferLen(len(arg458))
    defer mbTrans459.Close()
    _, err460 := mbTrans459.WriteString(arg458)
    if err460 != nil {
      Usage()
      return
    }
    factory461 := thrift.NewSimpleJSONProtocolFactory()
    jsProt462 := factory461.GetProtocol(mbTrans459)
    argvalue0 := meta.NewListPartsReq()
    err463 := argvalue0.Read(jsProt462)
    if err463 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListParts(value0))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg464 := flag.Arg(1)
    mbTrans465 := thrift.NewMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewSimpleJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue0 := meta.NewMultiPutReq()
    err469 := argvalue0.Read(jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg470 := flag.Arg(1)
    mbTrans471 := thrift.NewMemoryBufferLen(len(arg470))
    defer mbTrans471.Close()
    _, err472 := mbTrans471.WriteString(arg470)
    if err472 != nil {
      Usage()
      return
    }
    factory473 := thrift.NewSimpleJSONProtocolFactory()
    jsProt474 := factory473.GetProtocol(mbTrans471)
    argvalue0 := meta.NewGetReq()
    err475 := argvalue0.Read(jsProt474)
    if err475 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "multiGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg476 := flag.Arg(1)
    mbTrans477 := thrift.NewMemoryBufferLen(len(arg476))
    defer mbTrans477.Close()
    _, err478 := mbTrans477.WriteString(arg476)
    if err478 != nil {
      Usage()
      return
    }
    factory479 := thrift.NewSimpleJSONProtocolFactory()
    jsProt480 := factory479.GetProtocol(mbTrans477)
    argvalue0 := meta.NewMultiGetReq()
    err481 := argvalue0.Read(jsProt480)
    if err481 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg482 := flag.Arg(1)
    mbTrans483 := thrift.NewMemoryBufferLen(len(arg482))
    defer mbTrans483.Close()
    _, err484 := mbTrans483.WriteString(arg482)
    if err484 != nil {
      Usage()
      return
    }
    factory485 := thrift.NewSimpleJSONProtocolFactory()
    jsProt486 := factory485.GetProtocol(mbTrans483)
    argvalue0 := meta.NewRemoveReq()
    err487 := argvalue0.Read(jsProt486)
    if err487 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg488 := flag.Arg(1)
    mbTrans489 := thrift.NewMemoryBufferLen(len(arg488))
    defer mbTrans489.Close()
    _, err490 := mbTrans489.WriteString(arg488)
    if err490 != nil {
      Usage()
      return
    }
    factory491 := thrift.NewSimpleJSONProtocolFactory()
    jsProt492 := factory491.GetProtocol(mbTrans489)
    argvalue0 := meta.NewRemoveRangeReq()
    err493 := argvalue0.Read(jsProt492)
    if err493 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg494 := flag.Arg(1)
    mbTrans495 := thrift.NewMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil {
      Usage()
      return
    }
    factory497 := thrift.NewSimpleJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    argvalue0 := meta.NewScanReq()
    err499 := argvalue0.Read(jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(value0))
    fmt.Print("\n")
    break
  case "createTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTagIndex requires 1 args")
      flag.Usage()
    }
    arg500 := flag.Arg(1)
    mbTrans501 := thrift.NewMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil {
      Usage()
      return
    }
    factory503 := thrift.NewSimpleJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    argvalue0 := meta.NewCreateTagIndexReq()
    err505 := argvalue0.Read(jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTagIndex(value0))
    fmt.Print("\n")
    break
  case "dropTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTagIndex requires 1 args")
      flag.Usage()
    }
    arg506 := flag.Arg(1)
    mbTrans507 := thrift.NewMemoryBufferLen(len(arg506))
    defer mbTrans507.Close()
    _, err508 := mbTrans507.WriteString(arg506)
    if err508 != nil {
      Usage()
      return
    }
    factory509 := thrift.NewSimpleJSONProtocolFactory()
    jsProt510 := factory509.GetProtocol(mbTrans507)
    argvalue0 := meta.NewDropTagIndexReq()
    err511 := argvalue0.Read(jsProt510)
    if err511 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTagIndex(value0))
    fmt.Print("\n")
    break
  case "getTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTagIndex requires 1 args")
      flag.Usage()
    }
    arg512 := flag.Arg(1)
    mbTrans513 := thrift.NewMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil {
      Usage()
      return
    }
    factory515 := thrift.NewSimpleJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    argvalue0 := meta.NewGetTagIndexReq()
    err517 := argvalue0.Read(jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexes requires 1 args")
      flag.Usage()
    }
    arg518 := flag.Arg(1)
    mbTrans519 := thrift.NewMemoryBufferLen(len(arg518))
    defer mbTrans519.Close()
    _, err520 := mbTrans519.WriteString(arg518)
    if err520 != nil {
      Usage()
      return
    }
    factory521 := thrift.NewSimpleJSONProtocolFactory()
    jsProt522 := factory521.GetProtocol(mbTrans519)
    argvalue0 := meta.NewListTagIndexesReq()
    err523 := argvalue0.Read(jsProt522)
    if err523 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg524 := flag.Arg(1)
    mbTrans525 := thrift.NewMemoryBufferLen(len(arg524))
    defer mbTrans525.Close()
    _, err526 := mbTrans525.WriteString(arg524)
    if err526 != nil {
      Usage()
      return
    }
    factory527 := thrift.NewSimpleJSONProtocolFactory()
    jsProt528 := factory527.GetProtocol(mbTrans525)
    argvalue0 := meta.NewRebuildIndexReq()
    err529 := argvalue0.Read(jsProt528)
    if err529 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexStatus requires 1 args")
      flag.Usage()
    }
    arg530 := flag.Arg(1)
    mbTrans531 := thrift.NewMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewSimpleJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue0 := meta.NewListIndexStatusReq()
    err535 := argvalue0.Read(jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg536 := flag.Arg(1)
    mbTrans537 := thrift.NewMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewSimpleJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue0 := meta.NewCreateEdgeIndexReq()
    err541 := argvalue0.Read(jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "dropEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg542 := flag.Arg(1)
    mbTrans543 := thrift.NewMemoryBufferLen(len(arg542))
    defer mbTrans543.Close()
    _, err544 := mbTrans543.WriteString(arg542)
    if err544 != nil {
      Usage()
      return
    }
    factory545 := thrift.NewSimpleJSONProtocolFactory()
    jsProt546 := factory545.GetProtocol(mbTrans543)
    argvalue0 := meta.NewDropEdgeIndexReq()
    err547 := argvalue0.Read(jsProt546)
    if err547 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "getEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg548 := flag.Arg(1)
    mbTrans549 := thrift.NewMemoryBufferLen(len(arg548))
    defer mbTrans549.Close()
    _, err550 := mbTrans549.WriteString(arg548)
    if err550 != nil {
      Usage()
      return
    }
    factory551 := thrift.NewSimpleJSONProtocolFactory()
    jsProt552 := factory551.GetProtocol(mbTrans549)
    argvalue0 := meta.NewGetEdgeIndexReq()
    err553 := argvalue0.Read(jsProt552)
    if err553 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexes requires 1 args")
      flag.Usage()
    }
    arg554 := flag.Arg(1)
    mbTrans555 := thrift.NewMemoryBufferLen(len(arg554))
    defer mbTrans555.Close()
    _, err556 := mbTrans555.WriteString(arg554)
    if err556 != nil {
      Usage()
      return
    }
    factory557 := thrift.NewSimpleJSONProtocolFactory()
    jsProt558 := factory557.GetProtocol(mbTrans555)
    argvalue0 := meta.NewListEdgeIndexesReq()
    err559 := argvalue0.Read(jsProt558)
    if err559 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg560 := flag.Arg(1)
    mbTrans561 := thrift.NewMemoryBufferLen(len(arg560))
    defer mbTrans561.Close()
    _, err562 := mbTrans561.WriteString(arg560)
    if err562 != nil {
      Usage()
      return
    }
    factory563 := thrift.NewSimpleJSONProtocolFactory()
    jsProt564 := factory563.GetProtocol(mbTrans561)
    argvalue0 := meta.NewRebuildIndexReq()
    err565 := argvalue0.Read(jsProt564)
    if err565 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexStatus requires 1 args")
      flag.Usage()
    }
    arg566 := flag.Arg(1)
    mbTrans567 := thrift.NewMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewSimpleJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue0 := meta.NewListIndexStatusReq()
    err571 := argvalue0.Read(jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg572 := flag.Arg(1)
    mbTrans573 := thrift.NewMemoryBufferLen(len(arg572))
    defer mbTrans573.Close()
    _, err574 := mbTrans573.WriteString(arg572)
    if err574 != nil {
      Usage()
      return
    }
    factory575 := thrift.NewSimpleJSONProtocolFactory()
    jsProt576 := factory575.GetProtocol(mbTrans573)
    argvalue0 := meta.NewCreateUserReq()
    err577 := argvalue0.Read(jsProt576)
    if err577 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg578 := flag.Arg(1)
    mbTrans579 := thrift.NewMemoryBufferLen(len(arg578))
    defer mbTrans579.Close()
    _, err580 := mbTrans579.WriteString(arg578)
    if err580 != nil {
      Usage()
      return
    }
    factory581 := thrift.NewSimpleJSONProtocolFactory()
    jsProt582 := factory581.GetProtocol(mbTrans579)
    argvalue0 := meta.NewDropUserReq()
    err583 := argvalue0.Read(jsProt582)
    if err583 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg584 := flag.Arg(1)
    mbTrans585 := thrift.NewMemoryBufferLen(len(arg584))
    defer mbTrans585.Close()
    _, err586 := mbTrans585.WriteString(arg584)
    if err586 != nil {
      Usage()
      return
    }
    factory587 := thrift.NewSimpleJSONProtocolFactory()
    jsProt588 := factory587.GetProtocol(mbTrans585)
    argvalue0 := meta.NewAlterUserReq()
    err589 := argvalue0.Read(jsProt588)
    if err589 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg590 := flag.Arg(1)
    mbTrans591 := thrift.NewMemoryBufferLen(len(arg590))
    defer mbTrans591.Close()
    _, err592 := mbTrans591.WriteString(arg590)
    if err592 != nil {
      Usage()
      return
    }
    factory593 := thrift.NewSimpleJSONProtocolFactory()
    jsProt594 := factory593.GetProtocol(mbTrans591)
    argvalue0 := meta.NewGrantRoleReq()
    err595 := argvalue0.Read(jsProt594)
    if err595 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg596 := flag.Arg(1)
    mbTrans597 := thrift.NewMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewSimpleJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue0 := meta.NewRevokeRoleReq()
    err601 := argvalue0.Read(jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg602 := flag.Arg(1)
    mbTrans603 := thrift.NewMemoryBufferLen(len(arg602))
    defer mbTrans603.Close()
    _, err604 := mbTrans603.WriteString(arg602)
    if err604 != nil {
      Usage()
      return
    }
    factory605 := thrift.NewSimpleJSONProtocolFactory()
    jsProt606 := factory605.GetProtocol(mbTrans603)
    argvalue0 := meta.NewListUsersReq()
    err607 := argvalue0.Read(jsProt606)
    if err607 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg608 := flag.Arg(1)
    mbTrans609 := thrift.NewMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil {
      Usage()
      return
    }
    factory611 := thrift.NewSimpleJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    argvalue0 := meta.NewListRolesReq()
    err613 := argvalue0.Read(jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(value0))
    fmt.Print("\n")
    break
  case "getUserRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserRoles requires 1 args")
      flag.Usage()
    }
    arg614 := flag.Arg(1)
    mbTrans615 := thrift.NewMemoryBufferLen(len(arg614))
    defer mbTrans615.Close()
    _, err616 := mbTrans615.WriteString(arg614)
    if err616 != nil {
      Usage()
      return
    }
    factory617 := thrift.NewSimpleJSONProtocolFactory()
    jsProt618 := factory617.GetProtocol(mbTrans615)
    argvalue0 := meta.NewGetUserRolesReq()
    err619 := argvalue0.Read(jsProt618)
    if err619 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserRoles(value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg620 := flag.Arg(1)
    mbTrans621 := thrift.NewMemoryBufferLen(len(arg620))
    defer mbTrans621.Close()
    _, err622 := mbTrans621.WriteString(arg620)
    if err622 != nil {
      Usage()
      return
    }
    factory623 := thrift.NewSimpleJSONProtocolFactory()
    jsProt624 := factory623.GetProtocol(mbTrans621)
    argvalue0 := meta.NewChangePasswordReq()
    err625 := argvalue0.Read(jsProt624)
    if err625 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg626 := flag.Arg(1)
    mbTrans627 := thrift.NewMemoryBufferLen(len(arg626))
    defer mbTrans627.Close()
    _, err628 := mbTrans627.WriteString(arg626)
    if err628 != nil {
      Usage()
      return
    }
    factory629 := thrift.NewSimpleJSONProtocolFactory()
    jsProt630 := factory629.GetProtocol(mbTrans627)
    argvalue0 := meta.NewHBReq()
    err631 := argvalue0.Read(jsProt630)
    if err631 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg632 := flag.Arg(1)
    mbTrans633 := thrift.NewMemoryBufferLen(len(arg632))
    defer mbTrans633.Close()
    _, err634 := mbTrans633.WriteString(arg632)
    if err634 != nil {
      Usage()
      return
    }
    factory635 := thrift.NewSimpleJSONProtocolFactory()
    jsProt636 := factory635.GetProtocol(mbTrans633)
    argvalue0 := meta.NewBalanceReq()
    err637 := argvalue0.Read(jsProt636)
    if err637 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(value0))
    fmt.Print("\n")
    break
  case "leaderBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LeaderBalance requires 1 args")
      flag.Usage()
    }
    arg638 := flag.Arg(1)
    mbTrans639 := thrift.NewMemoryBufferLen(len(arg638))
    defer mbTrans639.Close()
    _, err640 := mbTrans639.WriteString(arg638)
    if err640 != nil {
      Usage()
      return
    }
    factory641 := thrift.NewSimpleJSONProtocolFactory()
    jsProt642 := factory641.GetProtocol(mbTrans639)
    argvalue0 := meta.NewLeaderBalanceReq()
    err643 := argvalue0.Read(jsProt642)
    if err643 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LeaderBalance(value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg644 := flag.Arg(1)
    mbTrans645 := thrift.NewMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewSimpleJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue0 := meta.NewRegConfigReq()
    err649 := argvalue0.Read(jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg650 := flag.Arg(1)
    mbTrans651 := thrift.NewMemoryBufferLen(len(arg650))
    defer mbTrans651.Close()
    _, err652 := mbTrans651.WriteString(arg650)
    if err652 != nil {
      Usage()
      return
    }
    factory653 := thrift.NewSimpleJSONProtocolFactory()
    jsProt654 := factory653.GetProtocol(mbTrans651)
    argvalue0 := meta.NewGetConfigReq()
    err655 := argvalue0.Read(jsProt654)
    if err655 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg656 := flag.Arg(1)
    mbTrans657 := thrift.NewMemoryBufferLen(len(arg656))
    defer mbTrans657.Close()
    _, err658 := mbTrans657.WriteString(arg656)
    if err658 != nil {
      Usage()
      return
    }
    factory659 := thrift.NewSimpleJSONProtocolFactory()
    jsProt660 := factory659.GetProtocol(mbTrans657)
    argvalue0 := meta.NewSetConfigReq()
    err661 := argvalue0.Read(jsProt660)
    if err661 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg662 := flag.Arg(1)
    mbTrans663 := thrift.NewMemoryBufferLen(len(arg662))
    defer mbTrans663.Close()
    _, err664 := mbTrans663.WriteString(arg662)
    if err664 != nil {
      Usage()
      return
    }
    factory665 := thrift.NewSimpleJSONProtocolFactory()
    jsProt666 := factory665.GetProtocol(mbTrans663)
    argvalue0 := meta.NewListConfigsReq()
    err667 := argvalue0.Read(jsProt666)
    if err667 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(value0))
    fmt.Print("\n")
    break
  case "createSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSnapshot requires 1 args")
      flag.Usage()
    }
    arg668 := flag.Arg(1)
    mbTrans669 := thrift.NewMemoryBufferLen(len(arg668))
    defer mbTrans669.Close()
    _, err670 := mbTrans669.WriteString(arg668)
    if err670 != nil {
      Usage()
      return
    }
    factory671 := thrift.NewSimpleJSONProtocolFactory()
    jsProt672 := factory671.GetProtocol(mbTrans669)
    argvalue0 := meta.NewCreateSnapshotReq()
    err673 := argvalue0.Read(jsProt672)
    if err673 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSnapshot(value0))
    fmt.Print("\n")
    break
  case "dropSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSnapshot requires 1 args")
      flag.Usage()
    }
    arg674 := flag.Arg(1)
    mbTrans675 := thrift.NewMemoryBufferLen(len(arg674))
    defer mbTrans675.Close()
    _, err676 := mbTrans675.WriteString(arg674)
    if err676 != nil {
      Usage()
      return
    }
    factory677 := thrift.NewSimpleJSONProtocolFactory()
    jsProt678 := factory677.GetProtocol(mbTrans675)
    argvalue0 := meta.NewDropSnapshotReq()
    err679 := argvalue0.Read(jsProt678)
    if err679 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSnapshot(value0))
    fmt.Print("\n")
    break
  case "listSnapshots":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
      flag.Usage()
    }
    arg680 := flag.Arg(1)
    mbTrans681 := thrift.NewMemoryBufferLen(len(arg680))
    defer mbTrans681.Close()
    _, err682 := mbTrans681.WriteString(arg680)
    if err682 != nil {
      Usage()
      return
    }
    factory683 := thrift.NewSimpleJSONProtocolFactory()
    jsProt684 := factory683.GetProtocol(mbTrans681)
    argvalue0 := meta.NewListSnapshotsReq()
    err685 := argvalue0.Read(jsProt684)
    if err685 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSnapshots(value0))
    fmt.Print("\n")
    break
  case "runAdminJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RunAdminJob requires 1 args")
      flag.Usage()
    }
    arg686 := flag.Arg(1)
    mbTrans687 := thrift.NewMemoryBufferLen(len(arg686))
    defer mbTrans687.Close()
    _, err688 := mbTrans687.WriteString(arg686)
    if err688 != nil {
      Usage()
      return
    }
    factory689 := thrift.NewSimpleJSONProtocolFactory()
    jsProt690 := factory689.GetProtocol(mbTrans687)
    argvalue0 := meta.NewAdminJobReq()
    err691 := argvalue0.Read(jsProt690)
    if err691 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RunAdminJob(value0))
    fmt.Print("\n")
    break
  case "addZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZone requires 1 args")
      flag.Usage()
    }
    arg692 := flag.Arg(1)
    mbTrans693 := thrift.NewMemoryBufferLen(len(arg692))
    defer mbTrans693.Close()
    _, err694 := mbTrans693.WriteString(arg692)
    if err694 != nil {
      Usage()
      return
    }
    factory695 := thrift.NewSimpleJSONProtocolFactory()
    jsProt696 := factory695.GetProtocol(mbTrans693)
    argvalue0 := meta.NewAddZoneReq()
    err697 := argvalue0.Read(jsProt696)
    if err697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZone(value0))
    fmt.Print("\n")
    break
  case "dropZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZone requires 1 args")
      flag.Usage()
    }
    arg698 := flag.Arg(1)
    mbTrans699 := thrift.NewMemoryBufferLen(len(arg698))
    defer mbTrans699.Close()
    _, err700 := mbTrans699.WriteString(arg698)
    if err700 != nil {
      Usage()
      return
    }
    factory701 := thrift.NewSimpleJSONProtocolFactory()
    jsProt702 := factory701.GetProtocol(mbTrans699)
    argvalue0 := meta.NewDropZoneReq()
    err703 := argvalue0.Read(jsProt702)
    if err703 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZone(value0))
    fmt.Print("\n")
    break
  case "addHostIntoZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHostIntoZone requires 1 args")
      flag.Usage()
    }
    arg704 := flag.Arg(1)
    mbTrans705 := thrift.NewMemoryBufferLen(len(arg704))
    defer mbTrans705.Close()
    _, err706 := mbTrans705.WriteString(arg704)
    if err706 != nil {
      Usage()
      return
    }
    factory707 := thrift.NewSimpleJSONProtocolFactory()
    jsProt708 := factory707.GetProtocol(mbTrans705)
    argvalue0 := meta.NewAddHostIntoZoneReq()
    err709 := argvalue0.Read(jsProt708)
    if err709 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHostIntoZone(value0))
    fmt.Print("\n")
    break
  case "dropHostFromZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropHostFromZone requires 1 args")
      flag.Usage()
    }
    arg710 := flag.Arg(1)
    mbTrans711 := thrift.NewMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil {
      Usage()
      return
    }
    factory713 := thrift.NewSimpleJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    argvalue0 := meta.NewDropHostFromZoneReq()
    err715 := argvalue0.Read(jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropHostFromZone(value0))
    fmt.Print("\n")
    break
  case "getZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetZone requires 1 args")
      flag.Usage()
    }
    arg716 := flag.Arg(1)
    mbTrans717 := thrift.NewMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil {
      Usage()
      return
    }
    factory719 := thrift.NewSimpleJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    argvalue0 := meta.NewGetZoneReq()
    err721 := argvalue0.Read(jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetZone(value0))
    fmt.Print("\n")
    break
  case "listZones":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListZones requires 1 args")
      flag.Usage()
    }
    arg722 := flag.Arg(1)
    mbTrans723 := thrift.NewMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewSimpleJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue0 := meta.NewListZonesReq()
    err727 := argvalue0.Read(jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListZones(value0))
    fmt.Print("\n")
    break
  case "addGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddGroup requires 1 args")
      flag.Usage()
    }
    arg728 := flag.Arg(1)
    mbTrans729 := thrift.NewMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewSimpleJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue0 := meta.NewAddGroupReq()
    err733 := argvalue0.Read(jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddGroup(value0))
    fmt.Print("\n")
    break
  case "dropGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropGroup requires 1 args")
      flag.Usage()
    }
    arg734 := flag.Arg(1)
    mbTrans735 := thrift.NewMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewSimpleJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue0 := meta.NewDropGroupReq()
    err739 := argvalue0.Read(jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropGroup(value0))
    fmt.Print("\n")
    break
  case "addZoneIntoGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZoneIntoGroup requires 1 args")
      flag.Usage()
    }
    arg740 := flag.Arg(1)
    mbTrans741 := thrift.NewMemoryBufferLen(len(arg740))
    defer mbTrans741.Close()
    _, err742 := mbTrans741.WriteString(arg740)
    if err742 != nil {
      Usage()
      return
    }
    factory743 := thrift.NewSimpleJSONProtocolFactory()
    jsProt744 := factory743.GetProtocol(mbTrans741)
    argvalue0 := meta.NewAddZoneIntoGroupReq()
    err745 := argvalue0.Read(jsProt744)
    if err745 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZoneIntoGroup(value0))
    fmt.Print("\n")
    break
  case "dropZoneFromGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZoneFromGroup requires 1 args")
      flag.Usage()
    }
    arg746 := flag.Arg(1)
    mbTrans747 := thrift.NewMemoryBufferLen(len(arg746))
    defer mbTrans747.Close()
    _, err748 := mbTrans747.WriteString(arg746)
    if err748 != nil {
      Usage()
      return
    }
    factory749 := thrift.NewSimpleJSONProtocolFactory()
    jsProt750 := factory749.GetProtocol(mbTrans747)
    argvalue0 := meta.NewDropZoneFromGroupReq()
    err751 := argvalue0.Read(jsProt750)
    if err751 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZoneFromGroup(value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    arg752 := flag.Arg(1)
    mbTrans753 := thrift.NewMemoryBufferLen(len(arg752))
    defer mbTrans753.Close()
    _, err754 := mbTrans753.WriteString(arg752)
    if err754 != nil {
      Usage()
      return
    }
    factory755 := thrift.NewSimpleJSONProtocolFactory()
    jsProt756 := factory755.GetProtocol(mbTrans753)
    argvalue0 := meta.NewGetGroupReq()
    err757 := argvalue0.Read(jsProt756)
    if err757 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGroup(value0))
    fmt.Print("\n")
    break
  case "listGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListGroups requires 1 args")
      flag.Usage()
    }
    arg758 := flag.Arg(1)
    mbTrans759 := thrift.NewMemoryBufferLen(len(arg758))
    defer mbTrans759.Close()
    _, err760 := mbTrans759.WriteString(arg758)
    if err760 != nil {
      Usage()
      return
    }
    factory761 := thrift.NewSimpleJSONProtocolFactory()
    jsProt762 := factory761.GetProtocol(mbTrans759)
    argvalue0 := meta.NewListGroupsReq()
    err763 := argvalue0.Read(jsProt762)
    if err763 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListGroups(value0))
    fmt.Print("\n")
    break
  case "createBackup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateBackup requires 1 args")
      flag.Usage()
    }
    arg764 := flag.Arg(1)
    mbTrans765 := thrift.NewMemoryBufferLen(len(arg764))
    defer mbTrans765.Close()
    _, err766 := mbTrans765.WriteString(arg764)
    if err766 != nil {
      Usage()
      return
    }
    factory767 := thrift.NewSimpleJSONProtocolFactory()
    jsProt768 := factory767.GetProtocol(mbTrans765)
    argvalue0 := meta.NewCreateBackupReq()
    err769 := argvalue0.Read(jsProt768)
    if err769 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateBackup(value0))
    fmt.Print("\n")
    break
  case "restoreMeta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RestoreMeta requires 1 args")
      flag.Usage()
    }
    arg770 := flag.Arg(1)
    mbTrans771 := thrift.NewMemoryBufferLen(len(arg770))
    defer mbTrans771.Close()
    _, err772 := mbTrans771.WriteString(arg770)
    if err772 != nil {
      Usage()
      return
    }
    factory773 := thrift.NewSimpleJSONProtocolFactory()
    jsProt774 := factory773.GetProtocol(mbTrans771)
    argvalue0 := meta.NewRestoreMetaReq()
    err775 := argvalue0.Read(jsProt774)
    if err775 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RestoreMeta(value0))
    fmt.Print("\n")
    break
  case "addListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddListener requires 1 args")
      flag.Usage()
    }
    arg776 := flag.Arg(1)
    mbTrans777 := thrift.NewMemoryBufferLen(len(arg776))
    defer mbTrans777.Close()
    _, err778 := mbTrans777.WriteString(arg776)
    if err778 != nil {
      Usage()
      return
    }
    factory779 := thrift.NewSimpleJSONProtocolFactory()
    jsProt780 := factory779.GetProtocol(mbTrans777)
    argvalue0 := meta.NewAddListenerReq()
    err781 := argvalue0.Read(jsProt780)
    if err781 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddListener(value0))
    fmt.Print("\n")
    break
  case "removeListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveListener requires 1 args")
      flag.Usage()
    }
    arg782 := flag.Arg(1)
    mbTrans783 := thrift.NewMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil {
      Usage()
      return
    }
    factory785 := thrift.NewSimpleJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    argvalue0 := meta.NewRemoveListenerReq()
    err787 := argvalue0.Read(jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveListener(value0))
    fmt.Print("\n")
    break
  case "listListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListListener requires 1 args")
      flag.Usage()
    }
    arg788 := flag.Arg(1)
    mbTrans789 := thrift.NewMemoryBufferLen(len(arg788))
    defer mbTrans789.Close()
    _, err790 := mbTrans789.WriteString(arg788)
    if err790 != nil {
      Usage()
      return
    }
    factory791 := thrift.NewSimpleJSONProtocolFactory()
    jsProt792 := factory791.GetProtocol(mbTrans789)
    argvalue0 := meta.NewListListenerReq()
    err793 := argvalue0.Read(jsProt792)
    if err793 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListListener(value0))
    fmt.Print("\n")
    break
  case "getStatis":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStatis requires 1 args")
      flag.Usage()
    }
    arg794 := flag.Arg(1)
    mbTrans795 := thrift.NewMemoryBufferLen(len(arg794))
    defer mbTrans795.Close()
    _, err796 := mbTrans795.WriteString(arg794)
    if err796 != nil {
      Usage()
      return
    }
    factory797 := thrift.NewSimpleJSONProtocolFactory()
    jsProt798 := factory797.GetProtocol(mbTrans795)
    argvalue0 := meta.NewGetStatisReq()
    err799 := argvalue0.Read(jsProt798)
    if err799 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetStatis(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
